generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone   String?
  name    Name[]
  address Address[]

  comments ProductComments[]
  orders   Orders[]
  cart     Cart[]
  roles    Role              @default(USER)
}

type Name {
  firstName  String
  middleName String?
  lastName   String?
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  //Building name and flat no
  address     String
  streetName  String
  landmark    String?
  locality    String
  pincode     Int
  city        String
  state       String
  // boolean address type means true for work and false for home
  addresstype Boolean @default(false)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Products {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  productName        String
  productDescription String
  productPrice       Float
  productImg         String
  productDiscount    Int?
  views              Int      @default(0)

  productDetails   ProductDetails[]
  ParentCategory   ParentCategory?   @relation(fields: [parentCategoryId], references: [id], onDelete: SetNull)
  parentCategoryId String?           @db.ObjectId
  SubCategory      SubCategory?      @relation(fields: [subCategoryId], references: [id], onDelete: SetNull)
  subCategoryId    String?           @db.ObjectId
  brandsId         String?           @db.ObjectId
  brand            Brands?           @relation(fields: [brandsId], references: [id], onDelete: SetNull)
  comments         ProductComments[]

  tagIds String[] @db.ObjectId
  tag    Tags[]   @relation(fields: [tagIds], references: [id])
}

model ProductDetails {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  productSize     String?
  productColor    String?
  productQuantity Int

  Products          Products?         @relation(fields: [productsId], references: [id], onDelete: SetNull)
  productsId        String?           @db.ObjectId
  cart              Cart[]            @relation(fields: [cartProductid], references: [id])
  cartProductid     String[]          @db.ObjectId
  orders            OrderedProducts[] @relation(fields: [orderedProductids], references: [id])
  orderedProductids String[]          @db.ObjectId
}

model ParentCategory {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  parentcategory String        @unique
  subcategories  SubCategory[]
  product        Products[]
}

model SubCategory {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  subcategory String @unique

  product          Products[]
  parentCategoryId String         @db.ObjectId
  ParentCategory   ParentCategory @relation(fields: [parentCategoryId], references: [id])
}

model Brands {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String     @unique
  products Products[]
}

model Tags {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  tagName    String     @unique
  productIds String[]   @db.ObjectId
  Products   Products[] @relation(fields: [productIds], references: [id])
}

model ProductComments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  feedback String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productdetailsId String[]         @db.ObjectId
  product          ProductDetails[] @relation(fields: [productdetailsId], references: [id])

  productQuantity Int @default(1)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Orders {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //for delivery status later

  name            String
  phone           String
  phone2          String?
  shippingAddress String
  paynmentId      String
  status          Boolean @default(false)
  totalAmount     Float

  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId String @db.ObjectId

  OrderedProducts OrderedProducts[] @relation(fields: [productsOrdered], references: [id])
  productsOrdered String[]          @db.ObjectId
}

model OrderedProducts {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productName        String
  productDescription String
  productImage       String
  productDiscount    Int?    @default(0)
  productDetailsid   String
  productSize        String?
  productColor       String?
  productQuantity    Int     @default(1)
  productPrice       String

  Order            Orders[]         @relation(fields: [orderId], references: [id])
  orderId          String[]         @db.ObjectId
  ProductDetail    ProductDetails[] @relation(fields: [productdetailsId], references: [id])
  productdetailsId String[]         @db.ObjectId
}

enum Role {
  USER
  WORKER
  MANAGER
  ADMIN
}
